#pragma kernel ComputeLeaves
#pragma kernel MarkUniqueLeaves
#pragma kernel ComputeArgs
#pragma kernel Subdivide

#include "Morton.cginc"
#include "OctreeCommon.cginc"

#define INT_MAX 0x7FFFFFFF
#define GROUP_SIZE 512

RWBuffer<uint> args;

int point_count;
StructuredBuffer<float3> points;

Buffer<uint> leaf_count;
RWStructuredBuffer<int> leaves;
RWStructuredBuffer<int> unique;

int current_level;

//第一个开始计算的核
//这个节点计算完毕后,可以得到
[numthreads(GROUP_SIZE,1,1)]
void ComputeLeaves(uint3 id: SV_DispatchThreadID)
{
    //只有当线程的Id小于点的总数才会执行,线程Id一定是对应于总数量而言的
    //比如这个计算中,首先确定核的大小(一个Group的大小,即GROUP_SIZE*1*1)
    //外层C#中Dispatch的核的数量为 总Point数/group大小,向上取整
    //那么第一个线程组处理0~512的顶点
    //第二个线程组处理513~1024的顶点,所以这里可能越界,故做限制
    if((int)id.x < point_count)
    {
        //根据深度计算叶子节点的大小(深度确定后,叶子节点大小也是确定的,这个是不依赖于八叉树的)
        float3 leaf_size = size / (1<<max_depth);
        //根据叶子节点大小计算 和点的坐标来计算该点是处在哪个叶子内
        int3 leaf_coords = (points[id.x] - min_corner) / leaf_size;
        //如果在最外层的bounds内,则计算该叶子的mortonCode,否则表示不在bounds内
        leaves[id.x] = in_bounds(leaf_coords) ? morton_encode(leaf_coords) : INT_MAX;
    }
}

//标记唯一的叶子节点
[numthreads(GROUP_SIZE,1,1)]
void MarkUniqueLeaves(uint3 id : SV_DispatchThreadID)
{
    if((int)id.x < point_count)
    {
        int val = leaves[id.x];
        int is_unique = (id.x == 0 || (val != leaves[id.x - 1] && (uint)val != INT_MAX));
        unique[id.x] = is_unique;
        //如果是unique的话,计数器加一
        if(is_unique)
        {
            unique.IncrementCounter();
        }
    }
}

[numthreads(1,1,1)]
void ComputeArgs(uint3 id: SV_DispatchThreadID)
{
    args[0] = ceil((float)args[0]/GROUP_SIZE);
    args[1] = 1;
    args[2] = 2;
}

[numthreads(GROUP_SIZE,1,1)]
void Subdivide(uint3 id: SV_DispatchThreadID)
{
    if(id.x < leaf_count[0])
    {
        int leaf = leaves[id.x];
        int3 leaf_coords = morton_decode(leaf);

        int node;
        int3 node_coords;
        traverse(leaf_coords,current_level,node,node_coords);

        int3 child_coords = get_child_coords(node_coords,current_level,leaf_coords);
        if(activate_child(node,child_coords))
        {
            int child = nodes.IncrementCounter();
            set_child(node,child,child_coords);
        }
    }
}
